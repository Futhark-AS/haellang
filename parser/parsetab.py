
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'statementnonassocLTGTEQleftPLUSMINUSleftTIMESDIVIDEBOOL BREAK DIVIDE DO ELSE END_OF_IF_THEN_ELSE END_OF_STATEMENT END_OF_WHILE EQ EQUALS GT IF LPAREN LT MINUS NAME NUMBER PASS PLUS PRINT RPAREN THEN TIMES WHILEexpression : expression PLUS expression\n                | expression MINUS expression\n                | expression TIMES expression\n                | expression DIVIDE expression\n                | expression GT expression\n                | expression LT expression\n                | expression EQ expressionexpression : LPAREN expression RPARENexpression : NUMBER\n                | BOOL\n                | NAMEstatement : statement statementstatement : IF expression THEN statement ELSE statement END_OF_IF_THEN_ELSE END_OF_STATEMENTstatement : NAME EQUALS expression END_OF_STATEMENTstatement : BREAK END_OF_STATEMENTstatement : WHILE expression DO statement END_OF_WHILE END_OF_STATEMENTstatement : PRINT expression END_OF_STATEMENTstatement : PASS END_OF_STATEMENT'
    
_lr_action_items = {'IF':([0,1,8,15,18,19,29,30,31,40,41,42,44,45,47,],[2,2,2,-15,-18,2,2,-17,2,-14,2,2,2,-16,-13,]),'NAME':([0,1,2,5,6,8,10,14,15,18,19,20,21,22,23,24,25,26,29,30,31,40,41,42,44,45,47,],[3,3,13,13,13,3,13,13,-15,-18,3,13,13,13,13,13,13,13,3,-17,3,-14,3,3,3,-16,-13,]),'BREAK':([0,1,8,15,18,19,29,30,31,40,41,42,44,45,47,],[4,4,4,-15,-18,4,4,-17,4,-14,4,4,4,-16,-13,]),'WHILE':([0,1,8,15,18,19,29,30,31,40,41,42,44,45,47,],[5,5,5,-15,-18,5,5,-17,5,-14,5,5,5,-16,-13,]),'PRINT':([0,1,8,15,18,19,29,30,31,40,41,42,44,45,47,],[6,6,6,-15,-18,6,6,-17,6,-14,6,6,6,-16,-13,]),'PASS':([0,1,8,15,18,19,29,30,31,40,41,42,44,45,47,],[7,7,7,-15,-18,7,7,-17,7,-14,7,7,7,-16,-13,]),'$end':([1,8,15,18,30,40,45,47,],[0,-12,-15,-18,-17,-14,-16,-13,]),'LPAREN':([2,5,6,10,14,20,21,22,23,24,25,26,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'NUMBER':([2,5,6,10,14,20,21,22,23,24,25,26,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'BOOL':([2,5,6,10,14,20,21,22,23,24,25,26,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'EQUALS':([3,],[14,]),'END_OF_STATEMENT':([4,7,11,12,13,17,28,32,33,34,35,36,37,38,39,43,46,],[15,18,-9,-10,-11,30,40,-1,-2,-3,-4,-5,-6,-7,-8,45,47,]),'ELSE':([8,15,18,30,31,40,45,47,],[-12,-15,-18,-17,42,-14,-16,-13,]),'END_OF_WHILE':([8,15,18,30,40,41,45,47,],[-12,-15,-18,-17,-14,43,-16,-13,]),'END_OF_IF_THEN_ELSE':([8,15,18,30,40,44,45,47,],[-12,-15,-18,-17,-14,46,-16,-13,]),'THEN':([9,11,12,13,32,33,34,35,36,37,38,39,],[19,-9,-10,-11,-1,-2,-3,-4,-5,-6,-7,-8,]),'PLUS':([9,11,12,13,16,17,27,28,32,33,34,35,36,37,38,39,],[20,-9,-10,-11,20,20,20,20,-1,-2,-3,-4,20,20,20,-8,]),'MINUS':([9,11,12,13,16,17,27,28,32,33,34,35,36,37,38,39,],[21,-9,-10,-11,21,21,21,21,-1,-2,-3,-4,21,21,21,-8,]),'TIMES':([9,11,12,13,16,17,27,28,32,33,34,35,36,37,38,39,],[22,-9,-10,-11,22,22,22,22,22,22,-3,-4,22,22,22,-8,]),'DIVIDE':([9,11,12,13,16,17,27,28,32,33,34,35,36,37,38,39,],[23,-9,-10,-11,23,23,23,23,23,23,-3,-4,23,23,23,-8,]),'GT':([9,11,12,13,16,17,27,28,32,33,34,35,36,37,38,39,],[24,-9,-10,-11,24,24,24,24,-1,-2,-3,-4,None,None,None,-8,]),'LT':([9,11,12,13,16,17,27,28,32,33,34,35,36,37,38,39,],[25,-9,-10,-11,25,25,25,25,-1,-2,-3,-4,None,None,None,-8,]),'EQ':([9,11,12,13,16,17,27,28,32,33,34,35,36,37,38,39,],[26,-9,-10,-11,26,26,26,26,-1,-2,-3,-4,None,None,None,-8,]),'DO':([11,12,13,16,32,33,34,35,36,37,38,39,],[-9,-10,-11,29,-1,-2,-3,-4,-5,-6,-7,-8,]),'RPAREN':([11,12,13,27,32,33,34,35,36,37,38,39,],[-9,-10,-11,39,-1,-2,-3,-4,-5,-6,-7,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,1,8,19,29,31,41,42,44,],[1,8,8,31,41,8,8,44,8,]),'expression':([2,5,6,10,14,20,21,22,23,24,25,26,],[9,16,17,27,28,32,33,34,35,36,37,38,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',100),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',101),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',102),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',103),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',104),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',105),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',106),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',111),
  ('expression -> NUMBER','expression',1,'p_expression_literal','parser.py',115),
  ('expression -> BOOL','expression',1,'p_expression_literal','parser.py',116),
  ('expression -> NAME','expression',1,'p_expression_literal','parser.py',117),
  ('statement -> statement statement','statement',2,'p_statement_recursive','parser.py',121),
  ('statement -> IF expression THEN statement ELSE statement END_OF_IF_THEN_ELSE END_OF_STATEMENT','statement',8,'p_statement_if','parser.py',125),
  ('statement -> NAME EQUALS expression END_OF_STATEMENT','statement',4,'p_statement_assign','parser.py',129),
  ('statement -> BREAK END_OF_STATEMENT','statement',2,'p_statement_break','parser.py',133),
  ('statement -> WHILE expression DO statement END_OF_WHILE END_OF_STATEMENT','statement',6,'p_statement_while','parser.py',137),
  ('statement -> PRINT expression END_OF_STATEMENT','statement',3,'p_statement_print','parser.py',141),
  ('statement -> PASS END_OF_STATEMENT','statement',2,'p_statement_pass','parser.py',145),
]
